{
  "_args": [
    [
      {
        "raw": "ali-oss",
        "scope": null,
        "escapedName": "ali-oss",
        "name": "ali-oss",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/zhouwei/Desktop/fenxiangshuke"
    ]
  ],
  "_cnpm_publish_time": 1510041309311,
  "_from": "ali-oss",
  "_hasShrinkwrap": false,
  "_id": "ali-oss@4.11.2",
  "_location": "/ali-oss",
  "_nodeVersion": "8.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ali-oss-4.11.2.tgz_1510041308770_0.12479073042050004"
  },
  "_npmUser": {
    "name": "fengmk2",
    "email": "fengmk2@gmail.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ali-oss",
    "scope": null,
    "escapedName": "ali-oss",
    "name": "ali-oss",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "http://registry.npm.taobao.org/ali-oss/download/ali-oss-4.11.2.tgz",
  "_shasum": "55a748fe8216dcf82aa8bfd539d40e3463a8ca2f",
  "_shrinkwrap": null,
  "_spec": "ali-oss",
  "_where": "/Users/zhouwei/Desktop/fenxiangshuke",
  "author": {
    "name": "dead_horse"
  },
  "browser": {
    "lib/client.js": "./lib/browser.js",
    "mime": "./shims/mime.js",
    "urllib": "./shims/xhr.js",
    "utility": "./shims/utility.js",
    "fs": false,
    "child_process": false
  },
  "bugs": {
    "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
  },
  "contributors": [
    {
      "name": "dead_horse",
      "email": "dead_horse@qq.com"
    },
    {
      "name": "chunpu",
      "email": "fengtong@mail.ustc.edu.cn"
    },
    {
      "name": "fengmk2",
      "email": "m@fengmk2.com",
      "url": "https://github.com/fengmk2"
    },
    {
      "name": "Yan Qing",
      "email": "admin@zensh.com",
      "url": "https://github.com/zensh"
    },
    {
      "name": "mars-coder",
      "email": "mars.ll@alibaba-inc.com",
      "url": "https://github.com/mars-coder"
    },
    {
      "name": "Jacky Tang",
      "email": "jackytck@gmail.com",
      "url": "https://github.com/jackytck"
    }
  ],
  "dependencies": {
    "address": "^1.0.0",
    "agentkeepalive": "^2.1.1",
    "bowser": "^1.6.0",
    "co": "^4.6.0",
    "co-defer": "^1.0.0",
    "co-gather": "^0.0.1",
    "copy-to": "^2.0.1",
    "dateformat": "^2.0.0",
    "debug": "^2.2.0",
    "destroy": "^1.0.4",
    "end-or-error": "^1.0.1",
    "get-ready": "^1.0.0",
    "humanize-ms": "^1.2.0",
    "is-type-of": "^1.0.0",
    "merge-descriptors": "^1.0.1",
    "mime": "^1.3.4",
    "platform": "^1.3.1",
    "sdk-base": "^2.0.1",
    "urllib": "^2.17.1",
    "utility": "^1.8.0",
    "xml2js": "^0.4.16"
  },
  "description": "aliyun oss(object storage service) node client",
  "devDependencies": {
    "aliasify": "^2.0.0",
    "autod": "^2.6.1",
    "babel-plugin-transform-runtime": "^6.8.0",
    "babel-preset-es2015": "^6.24.1",
    "babel-runtime": "^6.6.1",
    "babelify": "^7.3.0",
    "beautify-benchmark": "^0.2.4",
    "benchmark": "^2.1.1",
    "bluebird": "^3.1.5",
    "browserify": "^13.3.0",
    "co-fs": "^1.2.0",
    "co-mocha": "^1.2.1",
    "crypto-browserify": "^1.0.9",
    "crypto-js": "^3.1.9-1",
    "filereader": "^0.10.3",
    "git-pre-hooks": "^1.2.0",
    "istanbul": "^0.4.3",
    "karma": "^1.7.1",
    "karma-browserify": "^5.1.1",
    "karma-chrome-launcher": "^2.2.0",
    "karma-firefox-launcher": "^1.0.1",
    "karma-mocha": "^1.3.0",
    "mm": "^2.0.0",
    "mocha": "^3.5.3",
    "platform": "^1.3.4",
    "promise-polyfill": "^6.0.2",
    "should": "^11.0.0",
    "sinon": "^1.17.7",
    "stream-equal": "^1.1.0",
    "thunk-mocha": "^1.0.3",
    "timemachine": "^0.3.0",
    "uglify-js": "^2.8.29",
    "watchify": "^3.9.0"
  },
  "directories": {},
  "dist": {
    "shasum": "55a748fe8216dcf82aa8bfd539d40e3463a8ca2f",
    "size": 61873,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/ali-oss/download/ali-oss-4.11.2.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "lib",
    "shims"
  ],
  "git-pre-hooks": {
    "pre-release": "npm run build-dist",
    "post-release": [
      "npm publish",
      "npm run publish-to-cdn"
    ]
  },
  "gitHead": "7654190d7f6c9ece260ba3cb5d5ea000f9bac135",
  "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
  "keywords": [
    "oss",
    "client",
    "file",
    "aliyun"
  ],
  "license": "MIT",
  "main": "lib/client.js",
  "maintainers": [
    {
      "name": "dead_horse",
      "email": "dead_horse@qq.com"
    },
    {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com"
    },
    {
      "name": "mars-coder",
      "email": "254202194@qq.com"
    },
    {
      "name": "rockuw",
      "email": "rockuw@gmail.com"
    }
  ],
  "name": "ali-oss",
  "optionalDependencies": {},
  "publish_time": 1510041309311,
  "readme": "oss-nodejs-sdk\n=======\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage][cov-image]][cov-url]\n[![David deps][david-image]][david-url]\n\n[npm-image]: https://img.shields.io/npm/v/ali-oss.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/ali-oss\n[travis-image]: https://img.shields.io/travis/ali-sdk/ali-oss/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/ali-sdk/ali-oss.svg?branch=master\n[cov-image]: http://codecov.io/github/ali-sdk/ali-oss/coverage.svg?branch=master\n[cov-url]: http://codecov.io/github/ali-sdk/ali-oss?branch=master\n[david-image]: https://img.shields.io/david/ali-sdk/ali-oss.svg?style=flat-square\n[david-url]: https://david-dm.org/ali-sdk/ali-oss\n\naliyun OSS(object storage service) Node.js client.\n\n## Install\n\n```bash\nnpm install ali-oss --save\n```\n\n## License\n\n[MIT](LICENSE)\n\n# OSS Usage\n\nOSS, Object Storage Service. Equal to well known Amazon [S3](http://aws.amazon.com/s3/).\n\n## Summary\n\n- [Data Regions](#data-regions)\n- [Create Account](#create-acount)\n- [Create A Bucket Instance](#create-a-bucket-instance)\n  - [#oss(options)](#ossoptions)\n- [Bucket Operations](#bucket-operations)\n  - Base\n    - [.listBuckets*(query[, options])](#listbucketsquery-options)\n    - [.putBucket*(name, region[, options])](#putbucketname-region-options)\n    - [.useBucket(name, region)](#usebucketname-region)\n    - [.deleteBucket*(name, region[, options])](#deletebucketname-region-options)\n  - ACL\n    - [.putBucketACL*(name, region, acl[, options])](#putbucketaclname-region-acl-options)\n    - [.getBucketACL*(name, region[, options])](#getbucketaclname-region-options)\n  - Logging\n    - [.putBucketLogging*(name, region, prefix[, options])](#putbucketloggingname-region-prefix-options)\n    - [.getBucketLogging*(name, region[, options])](#getbucketloggingname-region-options)\n    - [.deleteBucketLogging*(name, region[, options])](#deletebucketloggingname-region-options)\n  - Website\n    - [.putBucketWebsite*(name, region, config[, options])](#putbucketwebsitename-region-config-options)\n    - [.getBucketWebsite*(name, region[, options])](#getbucketwebsitename-region-options)\n    - [.deleteBucketWebsite*(name, region[, options])](#deletebucketwebsitename-region-options)\n  - Referer\n    - [.putBucketReferer*(name, region, allowEmpty, referers[, options])](#putbucketreferername-region-allowempty-referers-options)\n    - [.getBucketReferer*(name, region[, options])](#getbucketreferername-region-options)\n    - [.deleteBucketReferer*(name, region[, options])](#deletebucketreferername-region-options)\n  - Lifecycle\n    - [.putBucketLifecycle*(name, region, rules[, options])](#putbucketlifecyclename-region-rules-options)\n    - [.getBucketLifecycle*(name, region[, options])](#getbucketlifecyclename-region-options)\n    - [.deleteBucketLifecycle*(name, region[, options])](#deletebucketlifecyclename-region-options)\n  - CORS\n    - [.putBucketCORS*(name, region, rules[, options])](#putbucketcorsname-region-rules-options)\n    - [.getBucketCORS*(name, region[, options])](#getbucketcorsname-region-options)\n    - [.deleteBucketCORS*(name, region[, options])](#deletebucketcorsname-region-options)\n- [Object Operations](#object-operations)\n  - [.list*(query[, options])](#listquery-options)\n  - [.put*(name, file[, options])](#putname-file-options)\n  - [.putStream*(name, stream[, options])](#putstreamname-stream-options)\n  - [.append*(name, file[, options])](#apendname-file-options)\n  - [.getObjectUrl(name[, baseUrl])](#getobjecturlname-baseurl)\n  - [.head*(name[, options])](#headname-options)\n  - [.get*(name, file[, options])](#getname-file-options)\n  - [.getStream*(name[, options])](#getstreamname-options)\n  - [.delete*(name[, options])](#deletename-options)\n  - [.copy*(name, sourceName[, options])](#copyname-sourcename-options)\n  - [.putMeta*(name, meta[, options])](#putmetaname-meta-options)\n  - [.deleteMulti*(names[, options])](#deletemultinames-options)\n  - [.signatureUrl(name[, options])](#signatureurlname-options)\n  - [.putACL*(name, acl[, options])](#putaclname-acl-options)\n  - [.getACL*(name[, options])](#getaclname-options)\n  - [.multipartUpload*(name, file[, options])](#multipartuploadname-file-options)\n  - [.listUploads*(query[, options])](#listuploadsquery-options)\n  - [.abortMultipartUpload*(name, uploadId[, options])](#abortmultipartuploadname-uploadid-options)\n- [Create A Image Service Instance](#create-a-image-service-instance)\n  - [#oss.ImageClient(options)](#ossimageclientoptions)\n- [Image Operations](#image-operations)\n  - [imgClient.get*(name, file[, options])](#imgclientgetname-file-options)\n  - [imgClient.getStream*(name[, options])](#imgclientgetstreamname-options)\n  - [imgClient.getExif*(name[, options])](#imgclientgetexifname-options)\n  - [imgClient.getInfo*(name[, options])](#imgclientgetinfoname-options)\n  - [imgClient.putStyle*(name, style[, options])](#imgclientputstylename-style-options)\n  - [imgClient.getStyle*(name[, options])](#imgclientgetstylename-options)\n  - [imgClient.listStyle*([options])](#imgclientliststyleoptions)\n  - [imgClient.deleteStyle*(name[, options])](#imgclientdeletestylename-options)\n  - [imgClient.signatureUrl(name)](#imgclientsignatureurlname)\n- [Wrapper Usage](#wrapper-usage)\n- [Browser Usage](#browser-usage)\n- [Known Errors](#known-errors)\n\n## Data Regions\n\n[OSS current data regions](https://help.aliyun.com/document_detail/oss/user_guide/endpoint_region.html).\n\nregion | country | city | endpoint | internal endpoint\n---  | ---     | ---  | --- | ---\noss-cn-hangzhou | China | HangZhou | oss-cn-hangzhou.aliyuncs.com | oss-cn-hangzhou-internal.aliyuncs.com\noss-cn-shanghai | China | ShangHai | oss-cn-shanghai.aliyuncs.com | oss-cn-shanghai-internal.aliyuncs.com\noss-cn-qingdao | China | QingDao | oss-cn-qingdao.aliyuncs.com | oss-cn-qingdao-internal.aliyuncs.com\noss-cn-beijing | China | BeiJing | oss-cn-beijing.aliyuncs.com | oss-cn-beijing-internal.aliyuncs.com\noss-cn-shenzhen | China | ShenZhen | oss-cn-shenzhen.aliyuncs.com | oss-cn-shenzhen-internal.aliyuncs.com\noss-cn-hongkong | China | HongKong | oss-cn-hongkong.aliyuncs.com | oss-cn-hongkong-internal.aliyuncs.com\noss-us-west-1 | US | Silicon Valley | oss-us-west-1.aliyuncs.com | oss-us-west-1-internal.aliyuncs.com\noss-ap-southeast-1 | Singapore | Singapore | oss-ap-southeast-1.aliyuncs.com | oss-ap-southeast-1-internal.aliyuncs.com\n\n## Create Account\n\nGo to [OSS website](http://www.aliyun.com/product/oss/?lang=en), create a new account for new user.\n\nAfter account created, you can create the OSS instance and get the `accessKeyId` and `accessKeySecret`.\n\n## Create A Bucket Instance\n\nEach OSS instance required `accessKeyId`, `accessKeySecret` and `bucket`.\n\n### #oss(options)\n\nCreate a Bucket store instance.\n\noptions:\n\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- [bucket] {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [endpoint] {String} oss region domain. It takes priority over `region`.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`.\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`.\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [secure] {Boolean} instruct OSS client to use HTTPS (secure: true) or HTTP (secure: false) protocol.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nvar oss = require('ali-oss');\n\nvar store = oss({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  region: 'oss-cn-hangzhou'\n});\n```\n\n## Bucket Operations\n\n### .listBuckets*(query[, options])\n\nList buckets in this account.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search buckets using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [max-keys] {String|Number} max buckets, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return buckets list on `buckets` properties.\n\n- buckets {Array<BucketMeta>} bucket meta info list\n  Each `BucketMeta` will contains blow properties:\n    - name {String} bucket name\n    - region {String} bucket store data region, e.g.: `oss-cn-hangzhou-a`\n    - creationDate {String} bucket create GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n- owner {Object} object owner, including `id` and `displayName`\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 buckets\n\n```js\nvar result = yield store.listBuckets({\n  \"max-keys\": 10\n});\nconsole.log(result);\n```\n\n### .putBucket*(name, region[, options])\n\nCreate a new bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket exists and not belong to current account, will throw BucketAlreadyExistsError.\n  If bucket not exists, will create a new bucket and set it's ACL.\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n  If change exists bucket region, will throw BucketAlreadyExistsError.\n  If region value invalid, will throw InvalidLocationConstraintError.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the bucket name on `bucket` properties.\n\n- bucket {String} bucket name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Create a bucket name `helloworld` location on HongKong\n\n```js\nyield store.putBucket('helloworld', 'oss-cn-hongkong');\n// use it by default\nstore.useBucket('helloworld', 'oss-cn-hongkong');\n```\n\n### .deleteBucket*(name, region[, options])\n\nDelete an empty bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket is not empty, will throw BucketNotEmptyError.\n  If bucket is not exists, will throw NoSuchBucketError.\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete the exists 'helloworld' bucket on 'oss-cn-hongkong'\n\n```js\nyield store.deleteBucket('helloworld', {\n  region: 'oss-cn-hongkong'\n});\n```\n\n### .useBucket(name, region)\n\nUse the bucket.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.useBucket('helloworld', 'oss-cn-hongkong');\n```\n\n---\n\n### .putBucketACL*(name, region, acl[, options])\n\nUpdate the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- acl {String} access control list, current available: `public-read-write`, `public-read` and `private`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set bucket `helloworld` to `public-read-write`\n\n```js\nyield store.putBucketACL('helloworld', 'oss-cn-hongkong', 'public-read-write');\n```\n\n### .getBucketACL*(name, region[, options])\n\nGet the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld`\n\n```js\nvar result = yield store.getBucketACL('helloworld', 'oss-cn-hongkong');\nconsole.log(result.acl);\n```\n\n---\n\n### .putBucketLogging*(name, region, prefix[, options])\n\nUpdate the bucket logging settings.\nLog file will create every one hour and name format: `<prefix><bucket>-YYYY-mm-DD-HH-MM-SS-UniqueString`.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [prefix] {String} prefix path name to store the log files\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Enable bucket `helloworld` logging and save with prefix `logs/`\n\n```js\nyield store.putBucketLogging('helloworld', 'oss-cn-hongkong', 'logs/');\n```\n\n### .getBucketLogging*(name, region[, options])\n\nGet the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- enable {Boolean} enable logging or not\n- prefix {String} prefix path name to store the log files, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld` logging settings\n\n```js\nvar result = yield store.getBucketLogging('helloworld', 'oss-cn-hongkong');\nconsole.log(result.enable, result.prefix);\n```\n\n### .deleteBucketLogging(name, region[, options])\n\nDelete the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketWebsite*(name, region, config[, options])\n\nSet the bucket as a static website.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- config {Object} website config, contains blow properties:\n  - index {String} default page, e.g.: `index.html`\n  - [error] {String} error page, e.g.: 'error.html'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketWebsite('hello', 'oss-cn-hangzhou', {\n  index: 'index.html'\n});\n```\n\n### .getBucketWebsite*(name, region[, options])\n\nGet the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- index {String} index page\n- error {String} error page, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketWebsite*(name, region[, options])\n\nDelete the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketReferer*(name, region, allowEmpty, referers[, options])\n\nSet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list, e.g.:\n  ```js\n  [\n    'https://npm.taobao.org',\n    'http://cnpmjs.org'\n  ]\n  ```\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketReferer('hello', 'oss-cn-hangzhou', false, [\n  'https://npm.taobao.org',\n  'http://cnpmjs.org'\n]);\n```\n\n### .getBucketReferer*(name, region[, options])\n\nGet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketReferer*(name, region[, options])\n\nDelete the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketLifecycle*(name, region, rules[, options])\n\nSet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- rules {Array<Rule>} rule config list, each `Rule` will contains blow properties:\n  - [id] {String} rule id, if not set, OSS will auto create it with random string.\n  - prefix {String} store prefix\n  - status {String} rule status, allow values: `Enabled` or `Disabled`\n  - [days] {Number|String} expire after the `days`\n  - [date] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `date` and `days` only set one.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketLifecycle('hello', 'oss-cn-hangzhou', [\n  {\n    id: 'delete after one day',\n    prefix: 'logs/',\n    status: 'Enabled',\n    days: 1\n  },\n  {\n    prefix: 'logs2/',\n    status: 'Disabled',\n    date: '2022-10-11T00:00:00.000Z'\n  }\n]);\n```\n\n### .getBucketLifecycle*(name, region[, options])\n\nGet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the lifecycle rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketLifecycle*(name, region[, options])\n\nDelete the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketCORS*(name, region, rules[, options])\n\nSet CORS rules of the bucket object\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- rules {Array<Rule>} rule config list, each `Rule` will contains below properties:\n  - allowedOrigin {String/Array} configure for Access-Control-Allow-Origin header\n  - allowedMethod {String/Array} configure for Access-Control-Allow-Methods header\n  - [allowedHeader] {String/Array} configure for Access-Control-Allow-Headers header\n  - [exposeHeader] {String/Array} configure for Access-Control-Expose-Headers header\n  - [maxAgeSeconds] {String} configure for Access-Control-Max-Age header\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketCORS('hello', 'oss-cn-hangzhou', [\n  {\n    allowedOrigin: '*',\n    allowedMethod: [\n      'GET',\n      'HEAD',\n    ],\n  }\n]);\n```\n\n### .getBucketCORS*(name, region[, options])\n\nGet CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the CORS rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketCORS*(name, region[, options])\n\nDelete CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n## Object Operations\n\nAll operations function is [generator], except `signatureUrl`.\n\ngenerator function format: `functionName*(...)`.\n\n### .put*(name, file[, options])\n\nAdd an object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through local file path\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nvar object = yield store.put('ossdemo/demo.txt', filepath);\nconsole.log(object);\n\n{\n  name: 'ossdemo/demo.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829244'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through content buffer\n\n```js\nvar object = yield store.put('ossdemo/buffer', new Buffer('foo content'));\nconsole.log(object);\n\n{\n  name: 'ossdemo/buffer',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/buffer',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"xxx\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829243'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through readstream\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nvar object = yield store.put('ossdemo/readstream.txt', fs.createReadStream(filepath));\nconsole.log(object);\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .putStream*(name, stream[, options])\n\nAdd a stream object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- stream {ReadStream} object ReadStream content instance\n- [options] {Object} optional parameters\n  - [contentLength] {Number} the stream length, `chunked encoding` will be used if absent\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through readstream\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nvar object = yield store.put('ossdemo/readstream.txt', fs.createReadStream(filepath));\nconsole.log(object);\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .append*(name, file[, options])\n\nAppend an object to the bucket, it's almost same as put, but it can add content to existing object rather than override it.\n\nAll parameters are same as put except for options.position\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [position] {String} specify the position which is the content length of the latest object\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nobject:\n\n- name {String} object name\n- url {String} the url of oss\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- nextAppendPosition {String} the next position\n\nexample:\n\n```js\nvar object = yield store.apend('ossdemo/buffer', new Buffer('foo'));\n\n// append content to the existing object\nobject = yield store.apend('ossdemo/buffer', new Buffer('bar'), {\n  position: object.nextAppendPosition,\n});\n```\n\n### .getObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `endpoint`.\n\ne.g.:\n\n```js\nconst cdnUrl = client.getObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .head*(name[, options])\n\nHead an object and get the meta info.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status, maybe 200 or 304\n- meta {Object} object user meta, if not set on `put()`, will return null.\n    If return status 304, meta will be null too\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Head an exists object and get user meta\n\n```js\nyield this.store.put('ossdemo/head-meta', new Buffer('foo'), {\n  meta: {\n    uid: 1,\n    path: 'foo/demo.txt'\n  }\n});\nvar object = this.store.head('ossdemo/head-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  meta: {\n    uid: '1',\n    path: 'foo/demo.txt'\n  },\n  res: { ... }\n}\n```\n\n- Head a not exists object\n\n```js\nvar object = this.store.head('ossdemo/head-meta');\n// will throw NoSuchKeyError\n```\n\n### .get*(name[, file, options])\n\nGet an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the content\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Range' get specifying range bytes content, e.g.: `Range: bytes=0-9`\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object and store it to the local file\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nyield store.get('ossdemo/demo.txt', filepath);\n```\n\n_ Store object to a writestream\n\n```js\nyield store.get('ossdemo/demo.txt', somestream);\n```\n\n- Get an object content buffer\n\n```js\nvar result = yield store.get('ossdemo/demo.txt');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a processed image and store it to the local file\n\n```js\nvar filepath = '/home/ossdemo/demo.png';\nyield store.get('ossdemo/demo.png', filepath, {process: 'image/resize,w_200'});\n```\n\n- Get a not exists object\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nyield store.get('ossdemo/not-exists-demo.txt', filepath);\n// will throw NoSuchKeyError\n```\n\n### .getStream*(name[, options])\n\nGet an object read stream.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object stream\n\n```js\nvar result = yield store.getStream('ossdemo/demo.txt');\nresult.stream.pipe(fs.createWriteStream('some file.txt'));\n```\n\n### .delete*(name[, options])\n\nDelete an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf delete object not exists, will also delete success.\n\nexample:\n\n- Delete an exists object\n\n```js\nyield store.delete('ossdemo/someobject');\n```\n\n- Delete a not exists object\n\n```js\nyield store.delete('ossdemo/some-not-exists-object');\n```\n\n### .copy*(name, sourceName[, options])\n\nCopy an object from `sourceName` to `name`.\n\nparameters:\n\n- name {String} object name store on OSS\n- sourceName {String} source object name\n  If `sourceName` start with `/`, meaning it's a full name contains the bucket name.\n  e.g.: `/otherbucket/logo.png` meaning copy `otherbucket` logn.png object to current bucket.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n    If the `meta` set, will override the source object meta.\n  - [headers] {Object} extra headers\n    - 'If-Match' do copy if source object etag equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' do copy if source object etag not equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-Modified-Since' do copy if source object modified after this time,\n        otherwise throw PreconditionFailedError\n    - 'If-Unmodified-Since' do copy if source object modified before this time,\n        otherwise throw PreconditionFailedError\n\nSuccess will return the copy result in `data` property.\n\nobject:\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT string\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf source object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Copy same bucket object\n\n```js\nvar result = yield store.copy('newName', 'oldName');\n```\n\n- Copy other bucket object\n\n```js\nvar result = yield store.copy('logo.png', '/other-bucket/logo.png');\n```\n\n### .putMeta*(name, meta[, options])\n\nSet an exists object meta.\n\nparameters:\n\n- name {String} object name store on OSS\n- meta {Object} user meta, will send with `x-oss-meta-` prefix string\n  e.g.: `{ uid: 123, pid: 110 }`\n  If `meta: null`, will clean up the exists meta\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the copy result in `data` property.\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Update exists object meta\n\n```js\nvar result = yield store.putMeta('ossdemo.txt', {\n  uid: 1, pid: 'p123'\n});\nconsole.log(result);\n```\n\n- Clean up object meta\n\n```js\nyield store.putMeta('ossdemo.txt', null);\n```\n\n### .deleteMulti*(names[, options])\n\nDelete multi objects in one request.\n\nparameters:\n\n- names {Array<String>} object names, max 1000 objects in once.\n- [options] {Object} optional parameters\n  - [quiet] {Boolean} quiet mode or verbose mode, default is `false`, verbose mode\n    quiet mode: if all objects delete succes, return emtpy response.\n      otherwise return delete error object results.\n    verbose mode: return all object delete results.\n  - [timeout] {Number} the operation timeout\n\nSuccess will return delete success objects in `deleted` property.\n\n- [deleted] {Array<String>} deleted object names list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete multi objects in quiet mode\n\n```js\nvar result = yield store.deleteMulti(['obj1', 'obj2', 'obj3'], {\n  quiet: true\n});\n```\n\n- Delete multi objects in verbose mode\n\n```js\nvar result = yield store.deleteMulti(['obj1', 'obj2', 'obj3']);\n```\n\n### .list*(query[, options])\n\nList objects in the bucket.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 objects\n\n```js\nvar result = yield store.list();\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nvar result = yield store.list({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nvar result = yield store.list({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n### .signatureUrl(name[, options])\n\nCreate a signature url for download or upload object.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [method] {String} the HTTP method, default is 'GET'\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [response] {Object} set the response headers for download\n    - [content-type] {String} set the response content type\n    - [content-disposition] {String} set the response content disposition\n    - [cache-control] {String} set the response cache control\n    - See more: https://help.aliyun.com/document_detail/oss/api-reference/object/GetObject.html\n\nSuccess will return signature url.\n\nexample:\n\n- Get signature url for object\n\n```js\nvar url = store.signatureUrl('ossdemo.txt');\nconsole.log(url);\n\nvar url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT'\n});\nconsole.log(url);\n\nvar url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  response: {\n    'content-type': 'text/custom',\n    'content-disposition': 'attachment'\n  }\n});\nconsole.log(url);\n```\n\n- Get a signature url for a processed image\n\n```js\nvar url = store.signatureUrl('ossdemo.png', {\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n\nvar url = store.signatureUrl('ossdemo.png', {\n  expires: 3600,\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n```\n\n### .putACL*(name, acl[, options])\n\nSet object's ACL.\n\nparameters:\n\n- name {String} object name\n- acl {String} acl (private/public-read/public-read-write)\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set an object's ACL\n\n```js\nyield store.putACL('ossdemo.txt', 'public-read');\n```\n\n### .getACL*(name[, options])\n\nGet object's ACL.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get an object's ACL\n\n```js\nvar result = yield store.getACL('ossdemo.txt');\nconsole.log(result.acl);\n```\n\n### .multipartUpload*(name, file[, options)\n\nUpload file with [OSS multipart][oss-multipart].\n\nparameters:\n\n- name {String} object name\n- file {String|File} file path or HTML5 Web File\n- [options] {Object} optional args\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part\n  - [progress] {Function} the progress callback called after each\n    successful upload of one part, it will be given two parameters:\n    (percentage {Number}, checkpoint {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n- Upload using multipart\n\n```js\nvar result = yield store.multipartUpload('object', '/tmp/file');\nconsole.log(result);\n\nvar result = yield store.multipartUpload('object', '/tmp/file', {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function* (p, cpt) {\n    console.log(p);\n    console.log(cpt);\n  }\n});\n\nvar result = yield store.multipartUpload('object', '/tmp/file', {\n  checkpoint: savedCpt,\n  progress: function* (p, cpt) {\n    console.log(p);\n    console.log(cpt);\n  }\n});\n\n```\n\n### .listUploads*(query[, options])\n\nList on-going multipart uploads, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- query {Object} query parameters\n  - [prefix] {String} the object key prefix\n  - [max-uploads] {Number} the max uploads to return\n  - [key-marker] {String} the object key marker, if `upload-id-marker`\n    is not provided, return uploads with `key > marker`, otherwise\n    return uploads with `key >= marker && uploadId > id-marker`\n  - [upload-id-marker] {String} the upload id marker, must be used\n    **WITH** `key-marker`\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- List on-going multipart uploads\n\n```js\n\nvar result = yield store.listUploads({\n  'max-uploads': 100,\n  'key-marker': 'my-object',\n  'upload-id-marker': 'upload-id'\n});\nconsole.log(result);\n```\n\n### .abortMultipartUpload*(name, uploadId[, options])\n\nAbort a multipart upload for object.\n\nparameters:\n\n- name {String} the object name\n- uploadId {String} the upload id\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- Abort a multipart upload\n\n```js\nvar result = yield store.abortMultipartUpload('object', 'upload-id');\nconsole.log(result);\n```\n\n## Create A Image Service Instance\n\nEach Image Service instance required `accessKeyId`, `accessKeySecret`, `bucket` and `imageHost`.\n\n### oss.ImageClient(options)\n\nCreate a Image service instance.\n\noptions:\n- imageHost {String} your image service domain that binding to a OSS bucket\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- bucket {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nvar oss = require('ali-oss');\n\nvar imgClient = oss.ImageClient({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'my_image_bucket'\n  imageHost: 'thumbnail.myimageservice.com'\n});\n```\n\n## Image Operations\n\nAll operations function is [generator], except `imgClient.signatureUrl`.\n\ngenerator function format: `functionName*(...)`.\n\n### imgClient.get*(name, file[, options])\n\nGet an image from the image channel.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the image\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image with a style and store it to the local file\n\n```js\nvar imagepath = '/home/ossdemo/demo.jpg';\nyield imgClient.get('ossdemo/demo.jpg@200w_200h', filepath);\n```\n\n_ Store image to a writestream\n\n```js\nyield imgClient.get('ossdemo/demo.jpg@200w_200h', somestream);\n```\n\n- Get an image content buffer\n\n```js\nvar result = yield imgClient.get('ossdemo/demo.jpg@200w_200h');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a not exists object or a not image object\n\n```js\nvar imagepath = '/home/ossdemo/demo.jpg';\nyield imgClient.get('ossdemo/not-exists-demo.jpg@200w_200h', filepath);\n// will throw NoSuchKeyError\n```\n\n### imgClient.getStream*(name[, options])\n\nGet an image read stream.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image object stream\n\n```js\nvar result = yield imgClient.getStream('ossdemo/demo.jpg@200w_200h');\nresult.stream.pipe(fs.createWriteStream('some demo.jpg'));\n```\n\n### imgClient.getExif*(name[, options])\n\nGet a image exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nIf object don't have exif, will throw 400 BadRequest.\n\nexample:\n\n```js\nvar result = yield imgClient.getExif('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n### imgClient.getInfo*(name[, options])\n\nGet a image info and exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nexample:\n\n```js\nvar result = yield imgClient.getInfo('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     Format: \"jpg\",\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n\n### imgClient.putStyle*(name, style[, options])\n// TODO\n\n### imgClient.getStyle*(name[, options])\n\nGet a style by name from the image channel.\n\nparameters:\n- name {String} image style name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} styles object\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nvar result = yield imgClient.getStyle('400');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"234\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:58:20 GMT\"\n//     },\n//     size: 234,\n//     aborted: false,\n//     rt: 398,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }\n// }\n```\n\n### imgClient.listStyle*([options])\n\nGet all styles from the image channel.\n\nparameters:\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Array} styles array, a style object:\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nvar result = yield imgClient.listStyle();\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"913\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:47:32 GMT\"\n//     },\n//     size: 913,\n//     aborted: false,\n//     rt: 1911,\n//     keepAliveSocket: false\n//   },\n//   data: [{\n//     Name: \"200-200\",\n//     Content: \"0e_200w_200h_0c_0i_0o_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:28:08 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:28:08 GMT\"\n//   }, {\n//     Name: \"800\",\n//     Content: \"800w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:29:15 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:29:15 GMT\"\n//   }, {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }, {\n//     Name: \"600\",\n//     Content: \"600w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:35:02 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:35:02 GMT\"\n//   }]\n// }\n```\n\n### imgClient.deleteStyle*(name[, options])\n// TODO\n\n### imgClient.signatureUrl(name)\n\nCreate a signature url for directly download.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return full signature url.\n\nexample:\n\n```js\nvar url = imgClient.signatureUrl('\n');\n// http://thumbnail.myimageservice.com/demo.jpg@200w_200h?OSSAccessKeyId=uZxyLARzYZtGwHKY&Expires=1427803849&Signature=JSPRe06%2FjQpQSj5zlx2ld1V%2B35I%3D\n```\n\n## Cluster Mode\n\nCluster mode now only support object operations.\n\n```js\nvar Cluster = require('ali-oss').ClusterClient;\n\nvar client = Cluster({\n  cluster: [{\n    host: 'host1',\n    accessKeyId: 'id1',\n    accessKeySecret: 'secret1'\n  }, {\n    host: 'host2',\n    accessKeyId: 'id2',\n    accessKeySecret: 'secret2'\n  }],\n  schedule: 'masterSlave', //default is `roundRobin`\n});\n\n// listen error event to logging error\nclient.on('error', function(err) {\n  console.error(err.stack);\n});\n\n// client init ready\nclient.ready(function() {\n  console.log('cluster client init ready, go ahead!');\n});\n```\n\n### Get Methods\n\nWill choose an alive client by schedule(`masterSlave` or `roundRobin`).\n\n- `client.get()`\n- `client.head()`\n- `client.getStream()`\n- `client.list()`\n- `client.signatureUrl()`\n- `client.chooseAvailable()` - choose an available client by schedule.\n\n### Put Methods\n\nWill put to all clients.\n\n- `client.put()`\n- `client.putStream()`\n- `client.delete()`\n- `client.deleteMulti()`\n- `client.copy()`\n- `client.putMeta()`\n\n## Wrapper Usage\n\nWe provide an async wrapper which can be used without `co`. All the\nmethods are preserved, just in a async way:\n\n```js\n\nvar OSS = require('ali-oss').Wrapper;\nvar STS = OSS.STS;\n\nvar client = new OSS({ /* same options */});\n\nclient.put('hello', new Buffer('world')).then(function (val) {\n  console.log('result: %j', val);\n}).catch (function (err) {\n  console.log('error: %j', err);\n});\n\nclient.get('hello').then(function (val) {\n  console.log('result: %j', val);\n}).catch (function (err) {\n  console.log('error: %j', err);\n});\n\nvar url = client.signatureUrl('hello');\nconsole.log(url);\n\nvar stsClient = new STS({ /* same options */});\n\nvar role = 'role';\n\nstsClient.assumeRole(role).then(function (val) {\n  console.log('result: %j', val);\n}).catch (function (err) {\n  console.log('error: %j', err);\n});\n```\n\n## Browser Usage\n\nYou can use most of the functionalities of `ali-oss` in browser with\nsome exceptions:\n\n- put object with streaming: no chunked encoding, we use multipart\n  upload instead\n- get object to local file: we cannot manipulate file system in\n  browser, we provide signed object url for downloading needs\n- bucket operations(listBuckets, putBucketLogging, etc) will fail: OSS\n  server currently do not support CORS requests for bucket operations\n  (will probably be fixed later)\n\n### Compatibility\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n\n### Setup\n\n#### Bucket setup\n\nAs browser-side javascript involves CORS operations. You need to setup\nyour bucket CORS rules to allow CORS operations:\n\n- set allowed origins to '\\*'\n- allowed methods to 'PUT, GET, POST, DELETE, HEAD'\n- set allowed headers to '\\*'\n- expose 'ETag' in expose headers\n\n#### STS setup\n\nAs we don't want to expose the accessKeyId/accessKeySecret in the\nbrowser, a [common practice][oss-sts] is to use STS to grant temporary\naccess.\n\n### Basic usage\n\nInclude the sdk lib in the `<script>` tag and you have `OSS` available\nfor creating client. We use `OSS.Wrapper` here to avoid using `co`:\n\n```html\n<script src=\"http://gosspublic.alicdn.com/aliyun-oss-sdk.min.js\"></script>\n<script type=\"text/javascript\">\n  var client = new OSS.Wrapper({\n    region: 'oss-cn-hangzhou',\n    accessKeyId: '<access-key-id>',\n    accessKeySecret: '<access-key-secret>',\n    bucket: '<bucket-name>'\n  });\n\n  client.list().then(function (result) {\n    console.log('objects: %j', result.objects);\n    return client.put('my-obj', new OSS.Buffer('hello world'));\n  }).then(function (result) {\n    console.log('put result: %j', result);\n    return client.get('my-obj');\n  }).then(function (result) {\n    console.log('get result: %j', result.content.toString());\n  });\n</script>\n```\nThe full sample can be found [here][browser-sample].\n\n### How to build\n\n```bash\nnpm run build-dist\n```\n\nAnd see the build artifacts under `dist/`.\n\n## Known Errors\n\nEach error return by OSS server will contains these properties:\n\n- name {String} error name\n- message {String} error message\n- requestId {String} uuid for this request, if you meet some unhandled problem,\n    you can send this request id to OSS engineer to find out what's happend.\n- hostId {String} OSS cluster name for this request\n\nname | status | message | message in Chinese\n---  | ---    | ---     | ---\nAccessDeniedError | 403 | Access Denied | 拒绝访问\nBucketAlreadyExistsError | 409 | Bucket already exists | Bucket 已经存在\nBucketNotEmptyError | 409 | Bucket is not empty | Bucket 不为空\nEntityTooLargeError | 400 | Entity too large | 实体过大\nEntityTooSmallError | 400 | Entity too small | 实体过小\nFileGroupTooLargeError | 400 | File group too large | 文件组过大\nInvalidLinkNameError | 400 | Link name can't be the same as the object name | Object Link 与指向的 Object 同名\nLinkPartNotExistError | 400 | Can't link to not exists object | Object Link 中指向的 Object 不存在\nObjectLinkTooLargeError | 400 | Too many links to this object | Object Link 中 Object 个数过多\nFieldItemTooLongError | 400 | Post form fields items too large | Post 请求中表单域过大\nFilePartInterityError | 400 | File part has changed | 文件 Part 已改变\nFilePartNotExistError | 400 | File part not exists | 文件 Part 不存在\nFilePartStaleError | 400 | File part stale | 文件 Part 过时\nIncorrectNumberOfFilesInPOSTRequestError | 400 | Post request contains invalid number of files | Post 请求中文件个数非法\nInvalidArgumentError | 400 | Invalid format argument | 参数格式错误\nInvalidAccessKeyIdError | 400 | Access key id not exists | Access Key ID 不存在\nInvalidBucketNameError | 400 | Invalid bucket name | 无效的 Bucket 名字\nInvalidDigestError | 400 | Invalid digest | 无效的摘要\nInvalidEncryptionAlgorithmError | 400 | Invalid encryption algorithm | 指定的熵编码加密算法错误\nInvalidObjectNameError | 400 | Invalid object name | 无效的 Object 名字\nInvalidPartError | 400 | Invalid part | 无效的 Part\nInvalidPartOrderError | 400 | Invalid part order | 无效的 part 顺序\nInvalidPolicyDocumentError | 400 | Invalid policy document | 无效的 Policy 文档\nInvalidTargetBucketForLoggingError | 400 | Invalid bucket on logging operation | Logging 操作中有无效的目标 bucket\nInternalError | 500 | OSS server internal error | OSS 内部发生错误\nMalformedXMLError | 400 | Malformed XML format | XML 格式非法\nMalformedPOSTRequestError | 400 | Invalid post body format | Post 请求的 body 格式非法\nMaxPOSTPreDataLengthExceededError | 400 | Post extra data too large | Post 请求上传文件内容之外的 body 过大\nMethodNotAllowedError | 405 | Not allowed method | 不支持的方法\nMissingArgumentError | 411 | Missing argument | 缺少参数\nMissingContentLengthError | 411 | Missing `Content-Length` header | 缺少内容长度\nNoSuchBucketError | 404 | Bucket not exists | Bucket 不存在\nNoSuchKeyError | 404 | Object not exists | 文件不存在\nNoSuchUploadError | 404 | Multipart upload id not exists | Multipart Upload ID 不存在\nNotImplementedError | 501 | Not implemented | 无法处理的方法\nPreconditionFailedError | 412 | Pre condition failed | 预处理错误\nRequestTimeTooSkewedError | 403 | Request time exceeds 15 minutes to server time | 发起请求的时间和服务器时间超出 15 分钟\nRequestTimeoutError | 400 | Request timeout | 请求超时\nRequestIsNotMultiPartContentError | 400 | Invalid post content-type | Post 请求 content-type 非法\nSignatureDoesNotMatchError | 403 | Invalid signature | 签名错误\nTooManyBucketsError | 400 | Too many buckets on this user | 用户的 Bucket 数目超过限制\n\n\n[generator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n[oss-sts]: https://help.aliyun.com/document_detail/oss/practice/ram_guide.html\n[browser-sample]: https://github.com/rockuw/oss-in-browser\n[oss-multipart]: https://help.aliyun.com/document_detail/oss/api-reference/multipart-upload/InitiateMultipartUpload.html\n[disabled-browser-headers]: https://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
  },
  "scripts": {
    "autod": "autod",
    "browser-test": "npm run build-test && karma start",
    "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
    "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
    "jshint": "jshint .",
    "publish-to-cdn": "node publish.js",
    "test": "mocha -t 60000 -r thunk-mocha -r should test/*.test.js",
    "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js"
  },
  "version": "4.11.2"
}
