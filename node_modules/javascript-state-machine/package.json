{
  "_args": [
    [
      {
        "raw": "javascript-state-machine@^2.3.5",
        "scope": null,
        "escapedName": "javascript-state-machine",
        "name": "javascript-state-machine",
        "rawSpec": "^2.3.5",
        "spec": ">=2.3.5 <3.0.0",
        "type": "range"
      },
      "/Users/zhouwei/Desktop/fenxiangshuke/node_modules/leancloud-realtime"
    ]
  ],
  "_cnpm_publish_time": 1479681646402,
  "_from": "javascript-state-machine@^2.3.5",
  "_hasShrinkwrap": false,
  "_id": "javascript-state-machine@2.4.0",
  "_location": "/javascript-state-machine",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/javascript-state-machine-2.4.0.tgz_1479681644388_0.11312017869204283"
  },
  "_npmUser": {
    "name": "jakesgordon",
    "email": "jakesgordon@gmail.com"
  },
  "_npmVersion": "4.0.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "javascript-state-machine@^2.3.5",
    "scope": null,
    "escapedName": "javascript-state-machine",
    "name": "javascript-state-machine",
    "rawSpec": "^2.3.5",
    "spec": ">=2.3.5 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/leancloud-realtime"
  ],
  "_resolved": "http://registry.npm.taobao.org/javascript-state-machine/download/javascript-state-machine-2.4.0.tgz",
  "_shasum": "d8be31ec38f24ac1a1832f0b672fc3cd5f79c96e",
  "_shrinkwrap": null,
  "_spec": "javascript-state-machine@^2.3.5",
  "_where": "/Users/zhouwei/Desktop/fenxiangshuke/node_modules/leancloud-realtime",
  "author": {
    "name": "Jake Gordon",
    "email": "jake@codeincomplete.com"
  },
  "bugs": {
    "url": "https://github.com/jakesgordon/javascript-state-machine/issues"
  },
  "dependencies": {},
  "description": "A simple finite state machine library",
  "devDependencies": {
    "local-web-server": "~1.2.6",
    "qunit": "~0.9.1",
    "uglify-js": "^2.7.4"
  },
  "directories": {},
  "dist": {
    "shasum": "d8be31ec38f24ac1a1832f0b672fc3cd5f79c96e",
    "size": 99048,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/javascript-state-machine/download/javascript-state-machine-2.4.0.tgz"
  },
  "gitHead": "c7538b4fce486a84de7a456b72ce7dc15201c818",
  "homepage": "https://github.com/jakesgordon/javascript-state-machine",
  "keywords": [
    "state machine",
    "server",
    "client"
  ],
  "main": "state-machine.js",
  "maintainers": [
    {
      "name": "jakesgordon",
      "email": "jakesgordon@gmail.com"
    }
  ],
  "name": "javascript-state-machine",
  "optionalDependencies": {},
  "publish_time": 1479681646402,
  "readme": "# Javascript Finite State Machine (v2.4.0)\n\nA standalone library for finite state machines.\n\n# Download\n\nUsing npm:\n\n    npm install javascript-state-machine\n\nOr download the source from [state-machine.js](https://github.com/jakesgordon/javascript-state-machine/raw/master/state-machine.js),\nor the [minified version](https://github.com/jakesgordon/javascript-state-machine/raw/master/state-machine.min.js)\n\n# Usage\n\nInclude `state-machine.js` in your web application:\n\n    <script src='state-machine.js'></script>\n\nOr for npm:\n\n    var StateMachine = require('javascript-state-machine');\n\nIn its simplest form, create a standalone state machine using:\n\n    var fsm = StateMachine.create({\n      initial: 'green',\n      events: [\n        { name: 'warn',  from: 'green',  to: 'yellow' },\n        { name: 'panic', from: 'yellow', to: 'red'    },\n        { name: 'calm',  from: 'red',    to: 'yellow' },\n        { name: 'clear', from: 'yellow', to: 'green'  }\n    ]});\n\n... will create an object with a method for each event:\n\n * fsm.warn()  - transition from 'green' to 'yellow'\n * fsm.panic() - transition from 'yellow' to 'red'\n * fsm.calm()  - transition from 'red' to 'yellow'\n * fsm.clear() - transition from 'yellow' to 'green'\n\nalong with the following members:\n\n * fsm.current       - contains the current state\n * fsm.is(s)         - return true if state `s` is the current state\n * fsm.can(e)        - return true if event `e` can be fired in the current state\n * fsm.cannot(e)     - return true if event `e` cannot be fired in the current state\n * fsm.transitions() - return list of events that are allowed from the current state\n * fsm.states()      - return list of all possible states.\n\n# Multiple 'from' and 'to' states for a single event\n\nIf an event is allowed **from** multiple states, and always transitions to the same\nstate, then simply provide an array of states in the `from` attribute of an event. However,\nif an event is allowed from multiple states, but should transition **to** a different\nstate depending on the current state, then provide multiple event entries with\nthe same name:\n\n    var fsm = StateMachine.create({\n      initial: 'hungry',\n      events: [\n        { name: 'eat',  from: 'hungry',                                to: 'satisfied' },\n        { name: 'eat',  from: 'satisfied',                             to: 'full'      },\n        { name: 'eat',  from: 'full',                                  to: 'sick'      },\n        { name: 'rest', from: ['hungry', 'satisfied', 'full', 'sick'], to: 'hungry'    },\n    ]});\n\nThis example will create an object with 2 event methods:\n\n * fsm.eat()\n * fsm.rest()\n\nThe `rest` event will always transition to the `hungry` state, while the `eat` event\nwill transition to a state that is dependent on the current state.\n\n> NOTE: The `rest` event could use a wildcard '*' for the 'from' state if it should be\nallowed from any current state.\n\n> NOTE: The `rest` event in the above example can also be specified as multiple events with\nthe same name if you prefer the verbose approach.\n\n# Callbacks\n\n4 types of callback are available by attaching methods to your StateMachine using the following naming conventions:\n\n * `onbeforeEVENT` - fired before the event\n * `onleaveSTATE`  - fired when leaving the old state\n * `onenterSTATE`  - fired when entering the new state\n * `onafterEVENT`  - fired after the event\n\n> (using your **specific** EVENT and STATE names)\n\nFor convenience, the 2 most useful callbacks can be shortened:\n\n * `onEVENT` - convenience shorthand for `onafterEVENT`\n * `onSTATE` - convenience shorthand for `onenterSTATE`\n\nIn addition, 4 general-purpose callbacks can be used to capture **all** event and state changes:\n\n * `onbeforeevent` - fired before *any* event\n * `onleavestate`  - fired when leaving *any* state\n * `onenterstate`  - fired when entering *any* state\n * `onafterevent`  - fired after *any* event\n\nAll callbacks will be passed the same arguments:\n\n * **event** name\n * **from** state\n * **to** state\n * _(followed by any arguments you passed into the original event method)_\n\nCallbacks can be specified when the state machine is first created:\n\n    var fsm = StateMachine.create({\n      initial: 'green',\n      events: [\n        { name: 'warn',  from: 'green',  to: 'yellow' },\n        { name: 'panic', from: 'yellow', to: 'red'    },\n        { name: 'calm',  from: 'red',    to: 'yellow' },\n        { name: 'clear', from: 'yellow', to: 'green'  }\n      ],\n      callbacks: {\n        onpanic:  function(event, from, to, msg) { alert('panic! ' + msg);               },\n        onclear:  function(event, from, to, msg) { alert('thanks to ' + msg);            },\n        ongreen:  function(event, from, to)      { document.body.className = 'green';    },\n        onyellow: function(event, from, to)      { document.body.className = 'yellow';   },\n        onred:    function(event, from, to)      { document.body.className = 'red';      },\n      }\n    });\n\n    fsm.panic('killer bees');\n    fsm.clear('sedatives in the honey pots');\n    ...\n\nAdditionally, they can be added and removed from the state machine at any time:\n\n    fsm.ongreen      = null;\n    fsm.onyellow     = null;\n    fsm.onred        = null;\n    fsm.onenterstate = function(event, from, to) { document.body.className = to; };\n\n\nThe order in which callbacks occur is as follows:\n\n> assume event **go** transitions from **red** state to **green**\n\n * `onbeforego`    - specific handler for the **go** event only\n * `onbeforeevent` - generic  handler for all events\n * `onleavered`    - specific handler for the **red** state only\n * `onleavestate`  - generic  handler for all states\n * `onentergreen`  - specific handler for the **green** state only\n * `onenterstate`  - generic  handler for all states\n * `onaftergo`     - specific handler for the **go** event only\n * `onafterevent`  - generic  handler for all events\n\n> NOTE: the legacy `onchangestate` handler has been deprecated and will be removed in a future version\n\nYou can affect the event in 3 ways:\n\n * return `false` from an `onbeforeEVENT` handler to cancel the event.\n * return `false` from an `onleaveSTATE` handler to cancel the event.\n * return `ASYNC` from an `onleaveSTATE` handler to perform an asynchronous state transition (see next section)\n\n# Asynchronous State Transitions\n\nSometimes, you need to execute some asynchronous code during a state transition and ensure the\nnew state is not entered until your code has completed.\n\nA good example of this is when you transition out of a `menu` state, perhaps you want to gradually\nfade the menu away, or slide it off the screen and don't want to transition to your `game` state\nuntil after that animation has been performed.\n\nYou can now return `StateMachine.ASYNC` from your `onleavestate` handler and the state machine\nwill be _'put on hold'_ until you are ready to trigger the transition using the new `transition()`\nmethod.\n\nFor example, using jQuery effects:\n\n    var fsm = StateMachine.create({\n\n      initial: 'menu',\n\n      events: [\n        { name: 'play', from: 'menu', to: 'game' },\n        { name: 'quit', from: 'game', to: 'menu' }\n      ],\n\n      callbacks: {\n\n        onentermenu: function() { $('#menu').show(); },\n        onentergame: function() { $('#game').show(); },\n\n        onleavemenu: function() {\n          $('#menu').fadeOut('fast', function() {\n            fsm.transition();\n          });\n          return StateMachine.ASYNC; // tell StateMachine to defer next state until we call transition (in fadeOut callback above)\n        },\n\n        onleavegame: function() {\n          $('#game').slideUp('slow', function() {\n            fsm.transition();\n          };\n          return StateMachine.ASYNC; // tell StateMachine to defer next state until we call transition (in slideUp callback above)\n        }\n\n      }\n    });\n\n> NOTE: If you decide to cancel the ASYNC event, you can call `fsm.transition.cancel();`\n\n# State Machine Classes\n\nYou can also turn all instances of a  _class_ into an FSM by applying\nthe state machine functionality to the prototype, including your callbacks\nin your prototype, and providing a `startup` event for use when constructing\ninstances:\n\n    MyFSM = function() {    // my constructor function\n      this.startup();\n    };\n\n    MyFSM.prototype = {\n\n      onpanic: function(event, from, to) { alert('panic');        },\n      onclear: function(event, from, to) { alert('all is clear'); },\n\n      // my other prototype methods\n\n    };\n\n    StateMachine.create({\n      target: MyFSM.prototype,\n      events: [\n        { name: 'startup', from: 'none',   to: 'green'  },\n        { name: 'warn',    from: 'green',  to: 'yellow' },\n        { name: 'panic',   from: 'yellow', to: 'red'    },\n        { name: 'calm',    from: 'red',    to: 'yellow' },\n        { name: 'clear',   from: 'yellow', to: 'green'  }\n      ]});\n\n\nThis should be easy to adjust to fit your appropriate mechanism for object construction.\n\n> NOTE: the `startup` event can be given any name, but it must be present in some form to \n  ensure that each instance constructed is initialized with its own unique `current` state.\n\n# Initialization Options\n\nHow the state machine should initialize can depend on your application requirements, so\nthe library provides a number of simple options.\n\nBy default, if you don't specify any initial state, the state machine will be in the `'none'`\nstate and you would need to provide an event to take it out of this state:\n\n    var fsm = StateMachine.create({\n      events: [\n        { name: 'startup', from: 'none',  to: 'green' },\n        { name: 'panic',   from: 'green', to: 'red'   },\n        { name: 'calm',    from: 'red',   to: 'green' },\n    ]});\n    alert(fsm.current); // \"none\"\n    fsm.startup();\n    alert(fsm.current); // \"green\"\n\nIf you specify the name of your initial state (as in all the earlier examples), then an\nimplicit `startup` event will be created for you and fired when the state machine is constructed.\n\n    var fsm = StateMachine.create({\n      initial: 'green',\n      events: [\n        { name: 'panic', from: 'green', to: 'red'   },\n        { name: 'calm',  from: 'red',   to: 'green' },\n    ]});\n    alert(fsm.current); // \"green\"\n\nIf your object already has a `startup` method you can use a different name for the initial event\n\n    var fsm = StateMachine.create({\n      initial: { state: 'green', event: 'init' },\n      events: [\n        { name: 'panic', from: 'green', to: 'red'   },\n        { name: 'calm',  from: 'red',   to: 'green' },\n    ]});\n    alert(fsm.current); // \"green\"\n\nFinally, if you want to wait to call the initial state transition event until a later date you\ncan `defer` it:\n\n    var fsm = StateMachine.create({\n      initial: { state: 'green', event: 'init', defer: true },\n      events: [\n        { name: 'panic', from: 'green', to: 'red'   },\n        { name: 'calm',  from: 'red',   to: 'green' },\n    ]});\n    alert(fsm.current); // \"none\"\n    fsm.init();\n    alert(fsm.current); // \"green\"\n\nOf course, we have now come full circle, this last example is pretty much functionally the\nsame as the first example in this section where you simply define your own startup event.\n\nSo you have a number of choices available to you when initializing your state machine.\n\n> IMPORTANT NOTE: if you are using the pattern described in the previous section \"State Machine\n  Classes\", and wish to declare an `initial` state in this manner, you MUST use the `defer: true`\n  attribute and manually call the starting event in your constructor function. This will ensure\n  that each instance gets its own unique `current` state, rather than an (unwanted) shared\n  `current` state on the prototype object itself.\n\n# Handling Failures\n\nBy default, if you try to call an event method that is not allowed in the current state, the\nstate machine will throw an exception. If you prefer to handle the problem yourself, you can\ndefine a custom `error` handler:\n\n    var fsm = StateMachine.create({\n      initial: 'green',\n      error: function(eventName, from, to, args, errorCode, errorMessage, originalException) {\n        return 'event ' + eventName + ' was naughty :- ' + errorMessage;\n      },\n      events: [\n        { name: 'panic', from: 'green', to: 'red'   },\n        { name: 'calm',  from: 'red',   to: 'green' },\n    ]});\n    alert(fsm.calm()); // \"event calm was naughty :- event not allowed in current state green\"\n\n# Contributing\n\n    > git clone git@github.com:jakesgordon/javascript-state-machine\n    > cd javascript-state-machine\n\n    > npm install      # install dev dependencies\n    > npm start        # run a local dev server\n\n * Source code - `state-machine.js`\n * Minified code - `state-machine.min.js` (build with `npm run minify`)\n * Browse demo at `/`\n * Run tests in browser at `/test/`\n * Run tests in console with `npm test`\n * Please include tests with pull requests.\n\n# Related Links\n\n * You can find the [code on github](https://github.com/jakesgordon/javascript-state-machine)\n * You can find a [working demo here](http://codeincomplete.com/posts/2011/8/19/javascript_state_machine_v2/example/)\n * [v2.3 release announcement](http://codeincomplete.com/posts/javascript-state-machine-v2-3-0/)\n * [v2.2 release announcement](http://codeincomplete.com/posts/javascript-state-machine-v2-2-0/)\n * [v2.1 release announcement](http://codeincomplete.com/posts/javascript-state-machine-v2-1-0/)\n * [v2.0 release announcement](http://codeincomplete.com/posts/javascript-state-machine-v2)\n * [v1.2 release announcement](http://codeincomplete.com/posts/javascript-state-machine-v1-2-0)\n * [v1.0 release announcement](http://codeincomplete.com/posts/javascript-state-machine)\n\n# Release Notes\n\nSee [RELEASE NOTES](https://github.com/jakesgordon/javascript-state-machine/blob/master/RELEASE_NOTES.md) file.\n\n# License\n\nSee [LICENSE](https://github.com/jakesgordon/javascript-state-machine/blob/master/LICENSE) file.\n\n# Contact\n\nIf you have any ideas, feedback, requests or bug reports, you can reach me at\n[jake@codeincomplete.com](mailto:jake@codeincomplete.com), or via\nmy website: [Code inComplete](http://codeincomplete.com/)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/jakesgordon/javascript-state-machine.git"
  },
  "scripts": {
    "minify": "uglifyjs state-machine.js --output state-machine.min.js --compress --mangle --stats",
    "start": "ws --rewrite '/test -> /test/'",
    "test": "node test/runner"
  },
  "version": "2.4.0"
}
